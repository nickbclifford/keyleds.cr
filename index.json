{"repository_name":"keyleds","body":"# keyleds.cr\n\nA Crystal interface to the [`libkeyleds`](https://github.com/keyleds/keyleds) library.\n\n## License\n\nAs a derived work of `keyleds`, these bindings are licensed under the GNU GPLv3.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     keyleds:\n       github: nickbclifford/keyleds.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"keyleds\"\n\nAPP_ID = 1_u8\n\nKeyleds::Device.open(\"/dev/hidraw1\", APP_ID) do |device|\n  puts device.name\n\n  device.set_led_block(:logo, red: 0, blue: 255, green: 0)\n  device.commit_leds\nend\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/nickbclifford/keyleds.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Nick Clifford](https://github.com/nickbclifford) - creator and maintainer\n","program":{"html_id":"keyleds/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"keyleds","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"keyleds/Keyleds","path":"Keyleds.html","kind":"module","full_name":"Keyleds","name":"Keyleds","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":3,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L3"},{"filename":"src/keyleds.cr","line_number":5,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/keyleds.cr#L5"}],"repository_name":"keyleds","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.0.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"keyleds/Keyleds/BlockId","path":"Keyleds/BlockId.html","kind":"alias","full_name":"Keyleds::BlockId","name":"BlockId","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":5,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L5"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"LibKeyleds::BlockId","aliased_html":"LibKeyleds::BlockId","const":false,"constants":[{"id":"Gkeys","name":"Gkeys","value":"4","doc":null,"summary":null},{"id":"Invalid","name":"Invalid","value":"-1","doc":null,"summary":null},{"id":"Keys","name":"Keys","value":"1","doc":null,"summary":null},{"id":"Logo","name":"Logo","value":"16","doc":null,"summary":null},{"id":"Modes","name":"Modes","value":"64","doc":null,"summary":null},{"id":"Multimedia","name":"Multimedia","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"Enum describing a keyboard's different key blocks.","summary":"<p>Enum describing a keyboard's different key blocks.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/Codes","path":"Keyleds/Codes.html","kind":"module","full_name":"Keyleds::Codes","name":"Codes","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/codes.cr","line_number":6,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/codes.cr#L6"}],"repository_name":"keyleds","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"Module containing utility functions for converting between Logitech internal scancodes\nand standard [Linux kernel keycodes](https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h).","summary":"<p>Module containing utility functions for converting between Logitech internal scancodes and standard <a href=\"https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h\">Linux kernel keycodes</a>.</p>","class_methods":[{"id":"to_keycode(block:BlockId,scancode:UInt8):UInt32-class-method","html_id":"to_keycode(block:BlockId,scancode:UInt8):UInt32-class-method","name":"to_keycode","doc":"Given a key scancode and the key block it resides in, returns the corresponding Linux keycode.","summary":"<p>Given a key scancode and the key block it resides in, returns the corresponding Linux keycode.</p>","abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"BlockId"},{"name":"scancode","doc":null,"default_value":"","external_name":"scancode","restriction":"UInt8"}],"args_string":"(block : BlockId, scancode : UInt8) : UInt32","args_html":"(block : <a href=\"../Keyleds/BlockId.html\">BlockId</a>, scancode : UInt8) : UInt32","location":{"filename":"src/codes.cr","line_number":10,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/codes.cr#L10"},"def":{"name":"to_keycode","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"BlockId"},{"name":"scancode","doc":null,"default_value":"","external_name":"scancode","restriction":"UInt8"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"LibKeyleds.translate_scancode(block, scancode)"}},{"id":"to_scancode(keycode:UInt32):LogitechScancode-class-method","html_id":"to_scancode(keycode:UInt32):LogitechScancode-class-method","name":"to_scancode","doc":"Given a Linux input keycode, returns the Logitech key scancode and the key block it resides in.","summary":"<p>Given a Linux input keycode, returns the Logitech key scancode and the key block it resides in.</p>","abstract":false,"args":[{"name":"keycode","doc":null,"default_value":"","external_name":"keycode","restriction":"UInt32"}],"args_string":"(keycode : UInt32) : LogitechScancode","args_html":"(keycode : UInt32) : <a href=\"../Keyleds/Codes/LogitechScancode.html\">LogitechScancode</a>","location":{"filename":"src/codes.cr","line_number":15,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/codes.cr#L15"},"def":{"name":"to_scancode","args":[{"name":"keycode","doc":null,"default_value":"","external_name":"keycode","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LogitechScancode","visibility":"Public","body":"if LibKeyleds.translate_keycode(keycode, out block, out scancode)\n  {block: block, scancode: scancode}\nelse\n  raise(ArgumentError.new(\"keycode #{keycode} does not correspond to a Logitech scancode\"))\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"keyleds/Keyleds/Codes/LogitechScancode","path":"Keyleds/Codes/LogitechScancode.html","kind":"alias","full_name":"Keyleds::Codes::LogitechScancode","name":"LogitechScancode","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/codes.cr","line_number":7,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/codes.cr#L7"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(block: LibKeyleds::BlockId, scancode: UInt8)","aliased_html":"{block: LibKeyleds::BlockId, scancode: UInt8}","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds/Codes","kind":"module","full_name":"Keyleds::Codes","name":"Codes"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"keyleds/Keyleds/Device","path":"Keyleds/Device.html","kind":"class","full_name":"Keyleds::Device","name":"Device","abstract":false,"superclass":{"html_id":"keyleds/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"keyleds/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"keyleds/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/bridge.cr","line_number":20,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L20"},{"filename":"src/device.cr","line_number":8,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L8"}],"repository_name":"keyleds","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"APP_IDS","name":"APP_IDS","value":"LibKeyleds::APP_ID_MIN..LibKeyleds::APP_ID_MAX","doc":"The full range of valid application IDs that can be used for initialization (i.e. `Device.open`.)","summary":"<p>The full range of valid application IDs that can be used for initialization (i.e.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"Represents a physical Logitech device that can be interfaced with.","summary":"<p>Represents a physical Logitech device that can be interfaced with.</p>","class_methods":[{"id":"open(path:String,app_id:UInt8,&)-class-method","html_id":"open(path:String,app_id:UInt8,&)-class-method","name":"open","doc":"Creates a new `Device` with the given parameters, yields it to a block, and automatically closes the device.","summary":"<p>Creates a new <code><a href=\"../Keyleds/Device.html\">Device</a></code> with the given parameters, yields it to a block, and automatically closes the device.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"app_id","doc":null,"default_value":"","external_name":"app_id","restriction":"UInt8"}],"args_string":"(path : String, app_id : UInt8, &)","args_html":"(path : String, app_id : UInt8, &)","location":{"filename":"src/device.cr","line_number":18,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L18"},"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"app_id","doc":null,"default_value":"","external_name":"app_id","restriction":"UInt8"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"dev = new(path, app_id)\nbegin\n  yield dev\nensure\n  dev.close\nend\n"}}],"constructors":[{"id":"new(path:String,app_id:UInt8)-class-method","html_id":"new(path:String,app_id:UInt8)-class-method","name":"new","doc":"Creates a new `Device`. Must be explicitly closed with `Device#close` after usage.\n\n- `path` must be a valid path to the device's corresponding HID file (i.e. `/dev/hidraw1`).\n- `app_id` is a constant identifier for use with all further device communication. See `APP_IDS` for valid arguments.","summary":"<p>Creates a new <code><a href=\"../Keyleds/Device.html\">Device</a></code>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"app_id","doc":null,"default_value":"","external_name":"app_id","restriction":"UInt8"}],"args_string":"(path : String, app_id : UInt8)","args_html":"(path : String, app_id : UInt8)","location":{"filename":"src/device.cr","line_number":31,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L31"},"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"app_id","doc":null,"default_value":"","external_name":"app_id","restriction":"UInt8"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(path, app_id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"blocks:Array(Keyblock)-instance-method","html_id":"blocks:Array(Keyblock)-instance-method","name":"blocks","doc":"Gets all device LED `Keyblock`s.","summary":"<p>Gets all device LED <code><a href=\"../Keyleds/Keyblock.html\">Keyblock</a></code>s.</p>","abstract":false,"args":[],"args_string":" : Array(Keyblock)","args_html":" : Array(<a href=\"../Keyleds/Keyblock.html\">Keyblock</a>)","location":{"filename":"src/device.cr","line_number":48,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L48"},"def":{"name":"blocks","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Keyblock)","visibility":"Public","body":"try(get_block_info, out ptr)\ndata_ptr = ((ptr.as(::Pointer(UInt8))) + (offsetof(LibKeyleds::KeyblocksInfo, @blocks))).as(::Pointer(Keyblock))\n(Slice.new(data_ptr, ptr.value.length)).to_a\n"}},{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":"Closes the device handle.","summary":"<p>Closes the device handle.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/device.cr","line_number":43,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L43"},"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibKeyleds.close(@device)"}},{"id":"commit_leds-instance-method","html_id":"commit_leds-instance-method","name":"commit_leds","doc":"Applies pending lighting changes set by `Device#set_leds` or `Device#set_led_block`.","summary":"<p>Applies pending lighting changes set by <code><a href=\"../Keyleds/Device.html#set_leds(block:BlockId,keys:Array(KeyColor))-instance-method\">Device#set_leds</a></code> or <code><a href=\"../Keyleds/Device.html#set_led_block(block:BlockId,red:UInt8,green:UInt8,blue:UInt8)-instance-method\">Device#set_led_block</a></code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/device.cr","line_number":56,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L56"},"def":{"name":"commit_leds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(commit_leds)"}},{"id":"custom_gkeys(enabled:Bool)-instance-method","html_id":"custom_gkeys(enabled:Bool)-instance-method","name":"custom_gkeys","doc":"Enables or disable custom G-key behavior. If `false`, G-keys will default to their corresponding F-keys.","summary":"<p>Enables or disable custom G-key behavior.</p>","abstract":false,"args":[{"name":"enabled","doc":null,"default_value":"","external_name":"enabled","restriction":"Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","location":{"filename":"src/device.cr","line_number":61,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L61"},"def":{"name":"custom_gkeys","args":[{"name":"enabled","doc":null,"default_value":"","external_name":"enabled","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(gkeys_enable, enabled)"}},{"id":"fd:IO::FileDescriptor-instance-method","html_id":"fd:IO::FileDescriptor-instance-method","name":"fd","doc":"Returns the device's underlying file descriptor.","summary":"<p>Returns the device's underlying file descriptor.</p>","abstract":false,"args":[],"args_string":" : IO::FileDescriptor","args_html":" : IO::FileDescriptor","location":{"filename":"src/device.cr","line_number":66,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L66"},"def":{"name":"fd","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"IO::FileDescriptor","visibility":"Public","body":"IO::FileDescriptor.new(LibKeyleds.device_fd(@device))"}},{"id":"feature_count:UInt32-instance-method","html_id":"feature_count:UInt32-instance-method","name":"feature_count","doc":"Gets the number of HID++ features supported by the device.","summary":"<p>Gets the number of HID++ features supported by the device.</p>","abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":{"filename":"src/device.cr","line_number":71,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L71"},"def":{"name":"feature_count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"with_target(get_feature_count)"}},{"id":"feature_id(feature_index:UInt8):UInt16-instance-method","html_id":"feature_id(feature_index:UInt8):UInt16-instance-method","name":"feature_id","doc":"Finds the feature ID of a feature, given its index in the device's internal feature table.","summary":"<p>Finds the feature ID of a feature, given its index in the device's internal feature table.</p>","abstract":false,"args":[{"name":"feature_index","doc":null,"default_value":"","external_name":"feature_index","restriction":"UInt8"}],"args_string":"(feature_index : UInt8) : UInt16","args_html":"(feature_index : UInt8) : UInt16","location":{"filename":"src/device.cr","line_number":76,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L76"},"def":{"name":"feature_id","args":[{"name":"feature_index","doc":null,"default_value":"","external_name":"feature_index","restriction":"UInt8"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt16","visibility":"Public","body":"with_target(get_feature_id, feature_index)"}},{"id":"feature_index(feature_id:UInt16):UInt8-instance-method","html_id":"feature_index(feature_id:UInt16):UInt8-instance-method","name":"feature_index","doc":"Given a feature's ID, returns its index in the device's internal table.","summary":"<p>Given a feature's ID, returns its index in the device's internal table.</p>","abstract":false,"args":[{"name":"feature_id","doc":null,"default_value":"","external_name":"feature_id","restriction":"UInt16"}],"args_string":"(feature_id : UInt16) : UInt8","args_html":"(feature_id : UInt16) : UInt8","location":{"filename":"src/device.cr","line_number":81,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L81"},"def":{"name":"feature_index","args":[{"name":"feature_id","doc":null,"default_value":"","external_name":"feature_id","restriction":"UInt16"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt8","visibility":"Public","body":"with_target(get_feature_index, feature_id)"}},{"id":"flush-instance-method","html_id":"flush-instance-method","name":"flush","doc":"Flushes pending inbound events, processing G-key presses if present.","summary":"<p>Flushes pending inbound events, processing G-key presses if present.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/device.cr","line_number":86,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L86"},"def":{"name":"flush","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if LibKeyleds.flush_fd(@device)\nelse\n  raise(Error.from_lib)\nend"}},{"id":"gamemode_add(scancodes:Array(UInt8))-instance-method","html_id":"gamemode_add(scancodes:Array(UInt8))-instance-method","name":"gamemode_add","doc":"Adds the given keys, represented by their scancodes, to the game mode block list.","summary":"<p>Adds the given keys, represented by their scancodes, to the game mode block list.</p>","abstract":false,"args":[{"name":"scancodes","doc":null,"default_value":"","external_name":"scancodes","restriction":"Array(UInt8)"}],"args_string":"(scancodes : Array(UInt8))","args_html":"(scancodes : Array(UInt8))","location":{"filename":"src/device.cr","line_number":107,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L107"},"def":{"name":"gamemode_add","args":[{"name":"scancodes","doc":null,"default_value":"","external_name":"scancodes","restriction":"Array(UInt8)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(gamemode_set, scancodes.to_unsafe, scancodes.size)"}},{"id":"gamemode_max_blocked:UInt32-instance-method","html_id":"gamemode_max_blocked:UInt32-instance-method","name":"gamemode_max_blocked","doc":"Returns the maximum possible number of keys that can be blocked at a time during game mode.","summary":"<p>Returns the maximum possible number of keys that can be blocked at a time during game mode.</p>","abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":{"filename":"src/device.cr","line_number":96,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L96"},"def":{"name":"gamemode_max_blocked","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"try(gamemode_max, out max)\nmax\n"}},{"id":"gamemode_remove(scancodes:Array(UInt8))-instance-method","html_id":"gamemode_remove(scancodes:Array(UInt8))-instance-method","name":"gamemode_remove","doc":"Remove the given keys, represented by their scancodes, from the game mode block list.","summary":"<p>Remove the given keys, represented by their scancodes, from the game mode block list.</p>","abstract":false,"args":[{"name":"scancodes","doc":null,"default_value":"","external_name":"scancodes","restriction":"Array(UInt8)"}],"args_string":"(scancodes : Array(UInt8))","args_html":"(scancodes : Array(UInt8))","location":{"filename":"src/device.cr","line_number":91,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L91"},"def":{"name":"gamemode_remove","args":[{"name":"scancodes","doc":null,"default_value":"","external_name":"scancodes","restriction":"Array(UInt8)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(gamemode_clear, scancodes.to_unsafe, scancodes.size)"}},{"id":"gamemode_reset-instance-method","html_id":"gamemode_reset-instance-method","name":"gamemode_reset","doc":"Resets the game mode blocked key list to empty.","summary":"<p>Resets the game mode blocked key list to empty.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/device.cr","line_number":102,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L102"},"def":{"name":"gamemode_reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(gamemode_reset)"}},{"id":"gkeys_count:UInt32-instance-method","html_id":"gkeys_count:UInt32-instance-method","name":"gkeys_count","doc":"Returns the number of G-keys available on the device.","summary":"<p>Returns the number of G-keys available on the device.</p>","abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":{"filename":"src/device.cr","line_number":112,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L112"},"def":{"name":"gkeys_count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"try(gkeys_count, out count)\ncount\n"}},{"id":"keyboard_layout:KeyboardLayout-instance-method","html_id":"keyboard_layout:KeyboardLayout-instance-method","name":"keyboard_layout","doc":"Returns the device's declared international keyboard layout.","summary":"<p>Returns the device's declared international keyboard layout.</p>","abstract":false,"args":[],"args_string":" : KeyboardLayout","args_html":" : <a href=\"../Keyleds/KeyboardLayout.html\">KeyboardLayout</a>","location":{"filename":"src/device.cr","line_number":118,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L118"},"def":{"name":"keyboard_layout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"KeyboardLayout","visibility":"Public","body":"with_target(keyboard_layout)"}},{"id":"leds(block:BlockId,key_offset:UInt16,num_keys:UInt32):Array(KeyColor)-instance-method","html_id":"leds(block:BlockId,key_offset:UInt16,num_keys:UInt32):Array(KeyColor)-instance-method","name":"leds","doc":"Starting at `key_offset` within the given block, returns `num_keys` current LED states.","summary":"<p>Starting at <code>key_offset</code> within the given block, returns <code>num_keys</code> current LED states.</p>","abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"BlockId"},{"name":"key_offset","doc":null,"default_value":"","external_name":"key_offset","restriction":"UInt16"},{"name":"num_keys","doc":null,"default_value":"","external_name":"num_keys","restriction":"UInt32"}],"args_string":"(block : BlockId, key_offset : UInt16, num_keys : UInt32) : Array(KeyColor)","args_html":"(block : <a href=\"../Keyleds/BlockId.html\">BlockId</a>, key_offset : UInt16, num_keys : UInt32) : Array(<a href=\"../Keyleds/KeyColor.html\">KeyColor</a>)","location":{"filename":"src/device.cr","line_number":123,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L123"},"def":{"name":"leds","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"BlockId"},{"name":"key_offset","doc":null,"default_value":"","external_name":"key_offset","restriction":"UInt16"},{"name":"num_keys","doc":null,"default_value":"","external_name":"num_keys","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(KeyColor)","visibility":"Public","body":"Array(KeyColor).build(num_keys) do |buf|\n  try(get_leds, block, buf, offset, num_keys)\n  num_keys\nend"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":"Returns the name of the device.","summary":"<p>Returns the name of the device.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/device.cr","line_number":131,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L131"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"try(get_device_name, out ptr)\nString.new(ptr)\n"}},{"id":"on_gkey(&callback:GkeysType,BitArray->)-instance-method","html_id":"on_gkey(&callback:GkeysType,BitArray->)-instance-method","name":"on_gkey","doc":"Defines a callback that should be run whenever a G-key (or M/MR-key) is pressed.\nThe second parameter is a `BitArray`, with the first bit representing the first key in the group.\nTriggered by `Device#flush`.\n\n```\nKeyleds::Device.open(\"/dev/hidraw1\", 1) do |dev|\n  dev.custom_gkeys(true)\n\n  dev.on_gkey do |type, keys|\n    puts \"is the first key on? #{keys[0]}\"\n  end\n\n  loop { dev.flush } # is the first key on? false\nend\n```","summary":"<p>Defines a callback that should be run whenever a G-key (or M/MR-key) is pressed.</p>","abstract":false,"args":[],"args_string":"(&callback : GkeysType, BitArray -> )","args_html":"(&callback : <a href=\"../Keyleds/GkeysType.html\">GkeysType</a>, BitArray -> )","location":{"filename":"src/device.cr","line_number":151,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L151"},"def":{"name":"on_gkey","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"callback","doc":null,"default_value":"","external_name":"callback","restriction":"(GkeysType, BitArray -> )"},"return_type":"","visibility":"Public","body":"count = gkeys_count.to_i\nmask_callback = ->(type : GkeysType, mask : UInt16) do\n  size = case type\n  in .gkey?\n    count\n  in .mkey?\n    3\n  in .mrkey?\n    1\n  end\n  arr = BitArray.new(size)\n  0.upto(size - 1) do |i|\n    arr[i] = (mask.bit(i)) == 1\n  end\n  callback.call(type, arr)\nend\nbox = Box.box(mask_callback)\n@cb = box\nwith_target(gkeys_set_cb, ->(device, target, type, mask, data) do\n  (Box(typeof(mask_callback)).unbox(data)).call(type, mask)\nend, box)\n"}},{"id":"ping-instance-method","html_id":"ping-instance-method","name":"ping","doc":"Resynchronizes with the device.\nUse as a recovery mechanism after another call has errored.","summary":"<p>Resynchronizes with the device.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/device.cr","line_number":178,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L178"},"def":{"name":"ping","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(ping)"}},{"id":"protocol:ProtocolSpec-instance-method","html_id":"protocol:ProtocolSpec-instance-method","name":"protocol","doc":"Returns the device's current protocol.","summary":"<p>Returns the device's current protocol.</p>","abstract":false,"args":[],"args_string":" : ProtocolSpec","args_html":" : <a href=\"../Keyleds/Device/ProtocolSpec.html\">ProtocolSpec</a>","location":{"filename":"src/device.cr","line_number":183,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L183"},"def":{"name":"protocol","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ProtocolSpec","visibility":"Public","body":"try(get_protocol, out version, out handler)\n{version: version, handler: handler}\n"}},{"id":"reportrate:UInt32-instance-method","html_id":"reportrate:UInt32-instance-method","name":"reportrate","doc":"Returns the device's current report rate.","summary":"<p>Returns the device's current report rate.</p>","abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":{"filename":"src/device.cr","line_number":189,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L189"},"def":{"name":"reportrate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"try(get_reportrate, out rate)\nrate\n"}},{"id":"set_led_block(block:BlockId,red:UInt8,green:UInt8,blue:UInt8)-instance-method","html_id":"set_led_block(block:BlockId,red:UInt8,green:UInt8,blue:UInt8)-instance-method","name":"set_led_block","doc":"Sets the entire LED block to a single uniform color.\nMust be committed with `Device#commit_leds`.","summary":"<p>Sets the entire LED block to a single uniform color.</p>","abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"BlockId"},{"name":"red","doc":null,"default_value":"","external_name":"red","restriction":"UInt8"},{"name":"green","doc":null,"default_value":"","external_name":"green","restriction":"UInt8"},{"name":"blue","doc":null,"default_value":"","external_name":"blue","restriction":"UInt8"}],"args_string":"(block : BlockId, red : UInt8, green : UInt8, blue : UInt8)","args_html":"(block : <a href=\"../Keyleds/BlockId.html\">BlockId</a>, red : UInt8, green : UInt8, blue : UInt8)","location":{"filename":"src/device.cr","line_number":202,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L202"},"def":{"name":"set_led_block","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"BlockId"},{"name":"red","doc":null,"default_value":"","external_name":"red","restriction":"UInt8"},{"name":"green","doc":null,"default_value":"","external_name":"green","restriction":"UInt8"},{"name":"blue","doc":null,"default_value":"","external_name":"blue","restriction":"UInt8"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(set_led_block, block, red, green, blue)"}},{"id":"set_leds(block:BlockId,keys:Array(KeyColor))-instance-method","html_id":"set_leds(block:BlockId,keys:Array(KeyColor))-instance-method","name":"set_leds","doc":"Sets the LED color for the given keys.\nMust be committed with `Device#commit_leds`.","summary":"<p>Sets the LED color for the given keys.</p>","abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"BlockId"},{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(KeyColor)"}],"args_string":"(block : BlockId, keys : Array(KeyColor))","args_html":"(block : <a href=\"../Keyleds/BlockId.html\">BlockId</a>, keys : Array(<a href=\"../Keyleds/KeyColor.html\">KeyColor</a>))","location":{"filename":"src/device.cr","line_number":196,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L196"},"def":{"name":"set_leds","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"BlockId"},{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(KeyColor)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(block, keys.to_unsafe, keys.size)"}},{"id":"set_mkeys(state:Tuple(Bool,Bool,Bool))-instance-method","html_id":"set_mkeys(state:Tuple(Bool,Bool,Bool))-instance-method","name":"set_mkeys","doc":"Sets the lighting state for the M keys.","summary":"<p>Sets the lighting state for the M keys.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"::Tuple(Bool, Bool, Bool)"}],"args_string":"(state : Tuple(Bool, Bool, Bool))","args_html":"(state : Tuple(Bool, Bool, Bool))","location":{"filename":"src/device.cr","line_number":207,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L207"},"def":{"name":"set_mkeys","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"::Tuple(Bool, Bool, Bool)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"mask = state.each_with_index.reduce(0_u8) do |acc, __arg0|\n  e = __arg0[0]\n  i = __arg0[1]\n  acc | ((e ? 1 : 0) << i)\nend\nputs(mask)\ntry(mkeys_set, mask)\n"}},{"id":"set_mrkey(state:Bool)-instance-method","html_id":"set_mrkey(state:Bool)-instance-method","name":"set_mrkey","doc":"Sets the lighting state for the MR key.","summary":"<p>Sets the lighting state for the MR key.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"args_string":"(state : Bool)","args_html":"(state : Bool)","location":{"filename":"src/device.cr","line_number":214,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L214"},"def":{"name":"set_mrkey","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(mrkeys_set, state ? 1 : 0)"}},{"id":"set_reportrate(rate:UInt32)-instance-method","html_id":"set_reportrate(rate:UInt32)-instance-method","name":"set_reportrate","doc":"Sets the keyboard's report rate to `rate`.","summary":"<p>Sets the keyboard's report rate to <code>rate</code>.</p>","abstract":false,"args":[{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"UInt32"}],"args_string":"(rate : UInt32)","args_html":"(rate : UInt32)","location":{"filename":"src/device.cr","line_number":219,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L219"},"def":{"name":"set_reportrate","args":[{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"try(set_reportrate, rate)"}},{"id":"set_timeout(microseconds:UInt32)-instance-method","html_id":"set_timeout(microseconds:UInt32)-instance-method","name":"set_timeout","doc":"Sets the device's HID++ command timeout.","summary":"<p>Sets the device's HID++ command timeout.</p>","abstract":false,"args":[{"name":"microseconds","doc":null,"default_value":"","external_name":"microseconds","restriction":"UInt32"}],"args_string":"(microseconds : UInt32)","args_html":"(microseconds : UInt32)","location":{"filename":"src/device.cr","line_number":224,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L224"},"def":{"name":"set_timeout","args":[{"name":"microseconds","doc":null,"default_value":"","external_name":"microseconds","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibKeyleds.set_timeout(@device, microseconds)"}},{"id":"supported_rates:Array(UInt32)-instance-method","html_id":"supported_rates:Array(UInt32)-instance-method","name":"supported_rates","doc":"Gets all supported report rates.","summary":"<p>Gets all supported report rates.</p>","abstract":false,"args":[],"args_string":" : Array(UInt32)","args_html":" : Array(UInt32)","location":{"filename":"src/device.cr","line_number":229,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L229"},"def":{"name":"supported_rates","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(UInt32)","visibility":"Public","body":"try(get_reportrates, out rates)\narr = [] of UInt32\n(0..).each do |i|\n  rate = rates[i]\n  if rate == 0\n  else\n    break\n  end\n  arr << rate\nend\narr\n"}},{"id":"type:Type-instance-method","html_id":"type:Type-instance-method","name":"type","doc":"Returns the device's type.\nSee `Type` for more info.","summary":"<p>Returns the device's type.</p>","abstract":false,"args":[],"args_string":" : Type","args_html":" : <a href=\"../Keyleds/Device/Type.html\">Type</a>","location":{"filename":"src/device.cr","line_number":242,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L242"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"try(get_device_type, out type)\ntype\n"}},{"id":"version:Version-instance-method","html_id":"version:Version-instance-method","name":"version","doc":"Returns the device's current firmware version.","summary":"<p>Returns the device's current firmware version.</p>","abstract":false,"args":[],"args_string":" : Version","args_html":" : <a href=\"../Keyleds/Device/Version.html\">Version</a>","location":{"filename":"src/device.cr","line_number":248,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/device.cr#L248"},"def":{"name":"version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Version","visibility":"Public","body":"try(get_device_version, out version_ptr)\nv = version_ptr.value\ndata_ptr = ((version_ptr.as(::Pointer(UInt8))) + (offsetof(LibKeyleds::DeviceVersion, @protocols))).as(::Pointer(LibKeyleds::DeviceProtocol))\nprotocols = (Slice.new(data_ptr, v.length)).map do |p|\n  Protocol.new(p.type, String.new(p.prefix.to_unsafe), p.version_major, p.version_minor, p.build, p.is_active, p.product_id, p.misc)\nend.to_a\nVersion.new(v.serial, v.transport, v.model, protocols)\n"}}],"macros":[],"types":[{"html_id":"keyleds/Keyleds/Device/Handler","path":"Keyleds/Device/Handler.html","kind":"alias","full_name":"Keyleds::Device::Handler","name":"Handler","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":22,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L22"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"LibKeyleds::DeviceHandler","aliased_html":"LibKeyleds::DeviceHandler","const":false,"constants":[{"id":"Device","name":"Device","value":"1","doc":null,"summary":null},{"id":"Feature","name":"Feature","value":"128","doc":null,"summary":null},{"id":"Gaming","name":"Gaming","value":"2","doc":null,"summary":null},{"id":"Preference","name":"Preference","value":"4","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds/Device","kind":"class","full_name":"Keyleds::Device","name":"Device"},"doc":"Enum describing the recommended use of a device.","summary":"<p>Enum describing the recommended use of a device.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/Device/Protocol","path":"Keyleds/Device/Protocol.html","kind":"struct","full_name":"Keyleds::Device::Protocol","name":"Protocol","abstract":false,"superclass":{"html_id":"keyleds/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"keyleds/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"keyleds/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"keyleds/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/bridge.cr","line_number":30,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L30"}],"repository_name":"keyleds","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds/Device","kind":"class","full_name":"Keyleds::Device","name":"Device"},"doc":"Describes a protocol that a device can communicate over.","summary":"<p>Describes a protocol that a device can communicate over.</p>","class_methods":[],"constructors":[{"id":"new(type:UInt8,prefix:String,version_major:UInt32,version_minor:UInt32,build:UInt32,is_active:Bool,product_id:UInt16,misc:StaticArray(UInt8,5))-class-method","html_id":"new(type:UInt8,prefix:String,version_major:UInt32,version_minor:UInt32,build:UInt32,is_active:Bool,product_id:UInt16,misc:StaticArray(UInt8,5))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"UInt8"},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"String"},{"name":"version_major","doc":null,"default_value":"","external_name":"version_major","restriction":"UInt32"},{"name":"version_minor","doc":null,"default_value":"","external_name":"version_minor","restriction":"UInt32"},{"name":"build","doc":null,"default_value":"","external_name":"build","restriction":"UInt32"},{"name":"is_active","doc":null,"default_value":"","external_name":"is_active","restriction":"Bool"},{"name":"product_id","doc":null,"default_value":"","external_name":"product_id","restriction":"UInt16"},{"name":"misc","doc":null,"default_value":"","external_name":"misc","restriction":"::StaticArray(UInt8, 5)"}],"args_string":"(type : UInt8, prefix : String, version_major : UInt32, version_minor : UInt32, build : UInt32, is_active : Bool, product_id : UInt16, misc : StaticArray(UInt8, <span class=\"n\">5</span>))","args_html":"(type : UInt8, prefix : String, version_major : UInt32, version_minor : UInt32, build : UInt32, is_active : Bool, product_id : UInt16, misc : StaticArray(UInt8, <span class=\"n\">5</span>))","location":{"filename":"src/bridge.cr","line_number":30,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L30"},"def":{"name":"new","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"UInt8"},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":"String"},{"name":"version_major","doc":null,"default_value":"","external_name":"version_major","restriction":"UInt32"},{"name":"version_minor","doc":null,"default_value":"","external_name":"version_minor","restriction":"UInt32"},{"name":"build","doc":null,"default_value":"","external_name":"build","restriction":"UInt32"},{"name":"is_active","doc":null,"default_value":"","external_name":"is_active","restriction":"Bool"},{"name":"product_id","doc":null,"default_value":"","external_name":"product_id","restriction":"UInt16"},{"name":"misc","doc":null,"default_value":"","external_name":"misc","restriction":"::StaticArray(UInt8, 5)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(type, prefix, version_major, version_minor, build, is_active, product_id, misc)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"build:UInt32-instance-method","html_id":"build:UInt32-instance-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":null,"def":{"name":"build","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"@build"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/bridge.cr","line_number":30,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L30"},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(@type.clone, @prefix.clone, @version_major.clone, @version_minor.clone, @build.clone, @is_active.clone, @product_id.clone, @misc.clone)"}},{"id":"copy_with(type_type=@type,prefix_prefix=@prefix,version_major_version_major=@version_major,version_minor_version_minor=@version_minor,build_build=@build,is_active_is_active=@is_active,product_id_product_id=@product_id,misc_misc=@misc)-instance-method","html_id":"copy_with(type_type=@type,prefix_prefix=@prefix,version_major_version_major=@version_major,version_minor_version_minor=@version_minor,build_build=@build,is_active_is_active=@is_active,product_id_product_id=@product_id,misc_misc=@misc)-instance-method","name":"copy_with","doc":null,"summary":null,"abstract":false,"args":[{"name":"_type","doc":null,"default_value":"@type","external_name":"type","restriction":""},{"name":"_prefix","doc":null,"default_value":"@prefix","external_name":"prefix","restriction":""},{"name":"_version_major","doc":null,"default_value":"@version_major","external_name":"version_major","restriction":""},{"name":"_version_minor","doc":null,"default_value":"@version_minor","external_name":"version_minor","restriction":""},{"name":"_build","doc":null,"default_value":"@build","external_name":"build","restriction":""},{"name":"_is_active","doc":null,"default_value":"@is_active","external_name":"is_active","restriction":""},{"name":"_product_id","doc":null,"default_value":"@product_id","external_name":"product_id","restriction":""},{"name":"_misc","doc":null,"default_value":"@misc","external_name":"misc","restriction":""}],"args_string":"(type _type = @type, prefix _prefix = @prefix, version_major _version_major = @version_major, version_minor _version_minor = @version_minor, build _build = @build, is_active _is_active = @is_active, product_id _product_id = @product_id, misc _misc = @misc)","args_html":"(type _type = @type, prefix _prefix = @prefix, version_major _version_major = @version_major, version_minor _version_minor = @version_minor, build _build = @build, is_active _is_active = @is_active, product_id _product_id = @product_id, misc _misc = @misc)","location":{"filename":"src/bridge.cr","line_number":30,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L30"},"def":{"name":"copy_with","args":[{"name":"_type","doc":null,"default_value":"@type","external_name":"type","restriction":""},{"name":"_prefix","doc":null,"default_value":"@prefix","external_name":"prefix","restriction":""},{"name":"_version_major","doc":null,"default_value":"@version_major","external_name":"version_major","restriction":""},{"name":"_version_minor","doc":null,"default_value":"@version_minor","external_name":"version_minor","restriction":""},{"name":"_build","doc":null,"default_value":"@build","external_name":"build","restriction":""},{"name":"_is_active","doc":null,"default_value":"@is_active","external_name":"is_active","restriction":""},{"name":"_product_id","doc":null,"default_value":"@product_id","external_name":"product_id","restriction":""},{"name":"_misc","doc":null,"default_value":"@misc","external_name":"misc","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(_type, _prefix, _version_major, _version_minor, _build, _is_active, _product_id, _misc)"}},{"id":"is_active:Bool-instance-method","html_id":"is_active:Bool-instance-method","name":"is_active","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":null,"def":{"name":"is_active","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@is_active"}},{"id":"misc:StaticArray(UInt8,5)-instance-method","html_id":"misc:StaticArray(UInt8,5)-instance-method","name":"misc","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : StaticArray(UInt8, <span class=\"n\">5</span>)","args_html":" : StaticArray(UInt8, <span class=\"n\">5</span>)","location":null,"def":{"name":"misc","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::StaticArray(UInt8, 5)","visibility":"Public","body":"@misc"}},{"id":"prefix:String-instance-method","html_id":"prefix:String-instance-method","name":"prefix","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":null,"def":{"name":"prefix","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@prefix"}},{"id":"product_id:UInt16-instance-method","html_id":"product_id:UInt16-instance-method","name":"product_id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt16","args_html":" : UInt16","location":null,"def":{"name":"product_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt16","visibility":"Public","body":"@product_id"}},{"id":"type:UInt8-instance-method","html_id":"type:UInt8-instance-method","name":"type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt8","args_html":" : UInt8","location":null,"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt8","visibility":"Public","body":"@type"}},{"id":"version_major:UInt32-instance-method","html_id":"version_major:UInt32-instance-method","name":"version_major","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":null,"def":{"name":"version_major","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"@version_major"}},{"id":"version_minor:UInt32-instance-method","html_id":"version_minor:UInt32-instance-method","name":"version_minor","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt32","args_html":" : UInt32","location":null,"def":{"name":"version_minor","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt32","visibility":"Public","body":"@version_minor"}}],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/Device/ProtocolSpec","path":"Keyleds/Device/ProtocolSpec.html","kind":"alias","full_name":"Keyleds::Device::ProtocolSpec","name":"ProtocolSpec","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":27,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L27"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"NamedTuple(version: UInt32, handler: LibKeyleds::DeviceHandler)","aliased_html":"{version: UInt32, handler: LibKeyleds::DeviceHandler}","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds/Device","kind":"class","full_name":"Keyleds::Device","name":"Device"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/Device/Type","path":"Keyleds/Device/Type.html","kind":"alias","full_name":"Keyleds::Device::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":25,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L25"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"LibKeyleds::DeviceType","aliased_html":"LibKeyleds::DeviceType","const":false,"constants":[{"id":"Keyboard","name":"Keyboard","value":"0","doc":null,"summary":null},{"id":"Mouse","name":"Mouse","value":"3","doc":null,"summary":null},{"id":"Numpad","name":"Numpad","value":"2","doc":null,"summary":null},{"id":"Presenter","name":"Presenter","value":"6","doc":null,"summary":null},{"id":"Receiver","name":"Receiver","value":"7","doc":null,"summary":null},{"id":"Remote","name":"Remote","value":"1","doc":null,"summary":null},{"id":"Touchpad","name":"Touchpad","value":"4","doc":null,"summary":null},{"id":"Trackball","name":"Trackball","value":"5","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds/Device","kind":"class","full_name":"Keyleds::Device","name":"Device"},"doc":"Enum describing the possible kinds of Logitech devices.","summary":"<p>Enum describing the possible kinds of Logitech devices.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/Device/Version","path":"Keyleds/Device/Version.html","kind":"struct","full_name":"Keyleds::Device::Version","name":"Version","abstract":false,"superclass":{"html_id":"keyleds/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"keyleds/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"keyleds/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"keyleds/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/bridge.cr","line_number":41,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L41"}],"repository_name":"keyleds","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds/Device","kind":"class","full_name":"Keyleds::Device","name":"Device"},"doc":"Describes the current firmware version of a device.","summary":"<p>Describes the current firmware version of a device.</p>","class_methods":[],"constructors":[{"id":"new(serial:StaticArray(UInt8,4),transport:UInt16,model:StaticArray(UInt8,6),protocols:Array(Protocol))-class-method","html_id":"new(serial:StaticArray(UInt8,4),transport:UInt16,model:StaticArray(UInt8,6),protocols:Array(Protocol))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"::StaticArray(UInt8, 4)"},{"name":"transport","doc":null,"default_value":"","external_name":"transport","restriction":"UInt16"},{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"::StaticArray(UInt8, 6)"},{"name":"protocols","doc":null,"default_value":"","external_name":"protocols","restriction":"Array(Protocol)"}],"args_string":"(serial : StaticArray(UInt8, <span class=\"n\">4</span>), transport : UInt16, model : StaticArray(UInt8, <span class=\"n\">6</span>), protocols : Array(Protocol))","args_html":"(serial : StaticArray(UInt8, <span class=\"n\">4</span>), transport : UInt16, model : StaticArray(UInt8, <span class=\"n\">6</span>), protocols : Array(<a href=\"../../Keyleds/Device/Protocol.html\">Protocol</a>))","location":{"filename":"src/bridge.cr","line_number":41,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L41"},"def":{"name":"new","args":[{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"::StaticArray(UInt8, 4)"},{"name":"transport","doc":null,"default_value":"","external_name":"transport","restriction":"UInt16"},{"name":"model","doc":null,"default_value":"","external_name":"model","restriction":"::StaticArray(UInt8, 6)"},{"name":"protocols","doc":null,"default_value":"","external_name":"protocols","restriction":"Array(Protocol)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(serial, transport, model, protocols)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/bridge.cr","line_number":41,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L41"},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(@serial.clone, @transport.clone, @model.clone, @protocols.clone)"}},{"id":"copy_with(serial_serial=@serial,transport_transport=@transport,model_model=@model,protocols_protocols=@protocols)-instance-method","html_id":"copy_with(serial_serial=@serial,transport_transport=@transport,model_model=@model,protocols_protocols=@protocols)-instance-method","name":"copy_with","doc":null,"summary":null,"abstract":false,"args":[{"name":"_serial","doc":null,"default_value":"@serial","external_name":"serial","restriction":""},{"name":"_transport","doc":null,"default_value":"@transport","external_name":"transport","restriction":""},{"name":"_model","doc":null,"default_value":"@model","external_name":"model","restriction":""},{"name":"_protocols","doc":null,"default_value":"@protocols","external_name":"protocols","restriction":""}],"args_string":"(serial _serial = @serial, transport _transport = @transport, model _model = @model, protocols _protocols = @protocols)","args_html":"(serial _serial = @serial, transport _transport = @transport, model _model = @model, protocols _protocols = @protocols)","location":{"filename":"src/bridge.cr","line_number":41,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L41"},"def":{"name":"copy_with","args":[{"name":"_serial","doc":null,"default_value":"@serial","external_name":"serial","restriction":""},{"name":"_transport","doc":null,"default_value":"@transport","external_name":"transport","restriction":""},{"name":"_model","doc":null,"default_value":"@model","external_name":"model","restriction":""},{"name":"_protocols","doc":null,"default_value":"@protocols","external_name":"protocols","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(_serial, _transport, _model, _protocols)"}},{"id":"model:StaticArray(UInt8,6)-instance-method","html_id":"model:StaticArray(UInt8,6)-instance-method","name":"model","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : StaticArray(UInt8, <span class=\"n\">6</span>)","args_html":" : StaticArray(UInt8, <span class=\"n\">6</span>)","location":null,"def":{"name":"model","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::StaticArray(UInt8, 6)","visibility":"Public","body":"@model"}},{"id":"protocols:Array(Protocol)-instance-method","html_id":"protocols:Array(Protocol)-instance-method","name":"protocols","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Protocol)","args_html":" : Array(<a href=\"../../Keyleds/Device/Protocol.html\">Protocol</a>)","location":null,"def":{"name":"protocols","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Protocol)","visibility":"Public","body":"@protocols"}},{"id":"serial:StaticArray(UInt8,4)-instance-method","html_id":"serial:StaticArray(UInt8,4)-instance-method","name":"serial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : StaticArray(UInt8, <span class=\"n\">4</span>)","args_html":" : StaticArray(UInt8, <span class=\"n\">4</span>)","location":null,"def":{"name":"serial","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::StaticArray(UInt8, 4)","visibility":"Public","body":"@serial"}},{"id":"transport:UInt16-instance-method","html_id":"transport:UInt16-instance-method","name":"transport","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt16","args_html":" : UInt16","location":null,"def":{"name":"transport","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt16","visibility":"Public","body":"@transport"}}],"macros":[],"types":[]}]},{"html_id":"keyleds/Keyleds/Error","path":"Keyleds/Error.html","kind":"class","full_name":"Keyleds::Error","name":"Error","abstract":false,"superclass":{"html_id":"keyleds/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"keyleds/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"keyleds/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"keyleds/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/error.cr","line_number":4,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/error.cr#L4"}],"repository_name":"keyleds","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"An `Error` is raised whenever `Keyleds` encounters an internal problem, such as when interfacing with a device.","summary":"<p>An <code><a href=\"../Keyleds/Error.html\">Error</a></code> is raised whenever <code><a href=\"../Keyleds.html\">Keyleds</a></code> encounters an internal problem, such as when interfacing with a device.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/GkeysType","path":"Keyleds/GkeysType.html","kind":"alias","full_name":"Keyleds::GkeysType","name":"GkeysType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":8,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L8"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"LibKeyleds::GkeysType","aliased_html":"LibKeyleds::GkeysType","const":false,"constants":[{"id":"Gkey","name":"Gkey","value":"0","doc":null,"summary":null},{"id":"Mkey","name":"Mkey","value":"1","doc":null,"summary":null},{"id":"Mrkey","name":"Mrkey","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"Enum describing the possible kinds of keys that trigger a G-key callback.","summary":"<p>Enum describing the possible kinds of keys that trigger a G-key callback.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/Keyblock","path":"Keyleds/Keyblock.html","kind":"alias","full_name":"Keyleds::Keyblock","name":"Keyblock","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":11,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L11"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"LibKeyleds::Keyblock","aliased_html":"LibKeyleds::Keyblock","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"Structure representing the number of keys in a key block and its current color.","summary":"<p>Structure representing the number of keys in a key block and its current color.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/KeyboardLayout","path":"Keyleds/KeyboardLayout.html","kind":"alias","full_name":"Keyleds::KeyboardLayout","name":"KeyboardLayout","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":15,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L15"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"LibKeyleds::KeyboardLayout","aliased_html":"LibKeyleds::KeyboardLayout","const":false,"constants":[{"id":"Fra","name":"Fra","value":"5","doc":null,"summary":null},{"id":"Invalid","name":"Invalid","value":"-1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"Enum describing a device's declared keyboard layout.\n**This is not an exhaustive list**, contributions to expand it are welcome.","summary":"<p>Enum describing a device's declared keyboard layout.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/KeyColor","path":"Keyleds/KeyColor.html","kind":"alias","full_name":"Keyleds::KeyColor","name":"KeyColor","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/bridge.cr","line_number":18,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/bridge.cr#L18"}],"repository_name":"keyleds","program":false,"enum":false,"alias":true,"aliased":"LibKeyleds::KeyColor","aliased_html":"LibKeyleds::KeyColor","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"Structure representing the position and color of a key.","summary":"<p>Structure representing the position and color of a key.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"keyleds/Keyleds/Strings","path":"Keyleds/Strings.html","kind":"module","full_name":"Keyleds::Strings","name":"Strings","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/strings.cr","line_number":4,"url":"https://github.com/nickbclifford/keyleds.cr/blob/v1.0.0/src/strings.cr#L4"}],"repository_name":"keyleds","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"BLOCK_ID_NAMES","name":"BLOCK_ID_NAMES","value":"begin\n  hash = {} of UInt32 => String\n  (0..).each do |i|\n    entry = LibKeyleds.keyleds_block_id_names.to_unsafe[i]\n    if (entry.id == 0) && entry.str.null?\n      break\n    end\n    hash[entry.id] = String.new(entry.str)\n  end\n  hash\nend","doc":null,"summary":null},{"id":"DEVICE_TYPES","name":"DEVICE_TYPES","value":"begin\n  hash = {} of UInt32 => String\n  (0..).each do |i|\n    entry = LibKeyleds.keyleds_device_types.to_unsafe[i]\n    if (entry.id == 0) && entry.str.null?\n      break\n    end\n    hash[entry.id] = String.new(entry.str)\n  end\n  hash\nend","doc":null,"summary":null},{"id":"FEATURE_NAMES","name":"FEATURE_NAMES","value":"begin\n  hash = {} of UInt32 => String\n  (0..).each do |i|\n    entry = LibKeyleds.keyleds_feature_names.to_unsafe[i]\n    if (entry.id == 0) && entry.str.null?\n      break\n    end\n    hash[entry.id] = String.new(entry.str)\n  end\n  hash\nend","doc":null,"summary":null},{"id":"KEYCODE_NAMES","name":"KEYCODE_NAMES","value":"begin\n  hash = {} of UInt32 => String\n  (0..).each do |i|\n    entry = LibKeyleds.keyleds_keycode_names.to_unsafe[i]\n    if (entry.id == 0) && entry.str.null?\n      break\n    end\n    hash[entry.id] = String.new(entry.str)\n  end\n  hash\nend","doc":null,"summary":null},{"id":"PROTOCOL_TYPES","name":"PROTOCOL_TYPES","value":"begin\n  hash = {} of UInt32 => String\n  (0..).each do |i|\n    entry = LibKeyleds.keyleds_protocol_types.to_unsafe[i]\n    if (entry.id == 0) && entry.str.null?\n      break\n    end\n    hash[entry.id] = String.new(entry.str)\n  end\n  hash\nend","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"keyleds/Keyleds","kind":"module","full_name":"Keyleds","name":"Keyleds"},"doc":"Module containing mapping hashes between various integer IDs and their human-readable names.","summary":"<p>Module containing mapping hashes between various integer IDs and their human-readable names.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}}